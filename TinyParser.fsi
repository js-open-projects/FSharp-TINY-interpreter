// Signature file for parser generated by fsyacc
module TinyParser
type token = 
  | EOF
  | ID of (string)
  | SEMI
  | WHILE
  | DO
  | OD
  | IF
  | THEN
  | ELSE
  | FI
  | READ
  | OUTPUT
  | PLUS
  | EQU
  | ASSIGN
  | NOT
  | BOOL of (bool)
  | NUM of (int)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_ID
    | TOKEN_SEMI
    | TOKEN_WHILE
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_FI
    | TOKEN_READ
    | TOKEN_OUTPUT
    | TOKEN_PLUS
    | TOKEN_EQU
    | TOKEN_ASSIGN
    | TOKEN_NOT
    | TOKEN_BOOL
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startprogram
    | NONTERM_program
    | NONTERM_cmdlist
    | NONTERM_cmd
    | NONTERM_expr
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val program : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (TinyMod.commandlist) 
