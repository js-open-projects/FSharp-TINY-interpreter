{ 
module TinyLex
open TinyParser
open Microsoft.FSharp.Text.Lexing

let keywords =   
  [ "read", READ;   "not", NOT;   "output", OUTPUT;
    "if", IF;  "then", THEN;  "else", ELSE;  "fi", FI;   
    "while", WHILE;  "do", DO;  "od", OD; ] |> Map.ofList
}
  
let digit       = ['0'-'9']   
let number      = digit+ 
let whitespace  = [' ' '\t']
let newline     = "\r\n" | '\n' | '\r'
let bool_true   = "true"
let bool_false  = "false"
let letter      = ['a'-'z' 'A'-'Z' '_']
let id          = letter (letter | digit)*

rule tokenize = parse
  | whitespace  { tokenize lexbuf }
  | newline     { tokenize lexbuf }
  | number      { NUM(System.Convert.ToInt32(
                        LexBuffer<_>.LexemeString lexbuf)) }
  | bool_true   { BOOL(true) }
  | bool_false  { BOOL(false) }
  | id          { let s = LexBuffer<_>.LexemeString 
                              lexbuf
                  match keywords.TryFind(s) with   
                  | Some(token) -> token   
                  | None -> ID(s) }
  | '='         { EQU }
  | '+'         { PLUS }
  | ":="        { ASSIGN }
  | ';'         { SEMI }
  | eof         { EOF }
